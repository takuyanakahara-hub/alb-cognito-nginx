events {}
http {
    lua_shared_dict Tokens 60m;
    server {
        listen 80;
        default_type text/html;

        location /ui/login {
            proxy_pass http://host.docker.internal:8000/ui/login;
        }

        location /login {
            proxy_pass http://host.docker.internal:8000/login;

            body_filter_by_lua_block {
                ngx.ctx.response_body = (ngx.ctx.response_body or "") .. (ngx.arg[1] or "")
            }

            log_by_lua_block {
                local json = require "cjson"
                local token_dict = ngx.shared.Tokens
                local data = json.decode(ngx.ctx.response_body)
                if data.AccessToken then
                    token_dict:set("accessToken", data.AccessToken)
                end
                if data.IdToken then
                    token_dict:set("idToken", data.IdToken)
                end
            }
        }

        set $accessToken "";
        set $idToken "";

        access_by_lua_block {
            local token_dict = ngx.shared.Tokens
            ngx.var.accessToken = token_dict:get("accessToken") or "sampleaccess"
            ngx.var.idToken = token_dict:get("idToken") or "sampleaccess"
        }

        location /ui/items {
            proxy_pass http://host.docker.internal:8000/ui/items;
            proxy_set_header x-amzn-oidc-accessToken $accessToken;
            proxy_set_header x-amzn-oidc-data $idToken;
        }

        location /items {
            proxy_pass http://host.docker.internal:8000/items;
            proxy_set_header x-amzn-oidc-accessToken $accessToken;
            proxy_set_header x-amzn-oidc-data $idToken;
        }
    }
}